##########
# GLOBAL #
##########

global !p
def create_table(snip):
	rows = snip.buffer[snip.line].split('x')[0]
	cols = snip.buffer[snip.line].split('x')[1]
	int_val = lambda string: int(''.join(s for s in string if s.isdigit()))
	rows = int_val(rows)
	cols = int_val(cols)
	offset = cols + 1
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing + "\\begin{tabular}{" + " ".join(["c@{\hspace{1cm}}" for i in range(cols - 1)]) + " c}\n"
	final_str += old_spacing + '\t'
	final_str += "\hline \n"
	final_str += old_spacing + '\t'
	final_str += " & ".join(['$' + str(j + offset) for j in range(cols)])
	final_str += " \\\\\\\n"		
	final_str += old_spacing + '\t'
	final_str += "\hline \n"
	for i in range(1, rows):
		final_str += old_spacing + '\t'
		final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])
		final_str += " \\\\\\\n"		
	final_str += old_spacing + '\t'
	final_str += "\hline \n"
	final_str += old_spacing + "\\end{tabular}\n$0"
	snip.expand_anon(final_str)

def add_row(snip):
	row_len = int(''.join(s for s in snip.buffer[snip.line] if s.isdigit()))
	old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]
	snip.buffer[snip.line] = ''
	final_str = old_spacing
	final_str += " & ".join(['$' + str(j + 1) for j in range(row_len)])
	final_str += " \\\\\\\n"
	final_str += old_spacing 
	final_str += "\hline"
	snip.expand_anon(final_str)

def create_matrix(snip):

        matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

        rows = int_val(rows)
        cols = int_val(cols)

        offset = cols + 1
        old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "\\begin{"+matrix_str+"}\n"
        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

                final_str += " \\\\\\\n"

        final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

        snip.expand_anon(final_str)
endglobal

pre_expand "create_matrix(snip)"
snippet "(small|[bBpvV])?mat?(\d+)x(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" br
endsnippet



############
# TEMPLATE #
############

snippet template "Basic template" b

\documentclass[a4paper,10pt,norsk]{article}
\usepackage[utf8]{inputenc}
\usepackage[norsk]{babel}
\usepackage{graphicx, verbatim, amsmath, amsfonts, geometry, float, import, bm}
\usepackage{siunitx} % converts expression to SI units/notation , \num{10e-10}
\usepackage[hidelinks]{hyperref}
\usepackage{hyperref}         % automagic cross-referencing
\usepackage{biblatex}
\usepackage{physics}
\usepackage[bbgreekl]{mathbbol}
\addbibresource{../Papers/refs.bib}

% Code higligthing
\usepackage{listings}
\usepackage{xcolor}
\definecolor{codegreen}{rgb}{0,0.6,0}
\definecolor{codegray}{rgb}{0.5,0.5,0.5}
\definecolor{codepurple}{rgb}{0.58,0,0.82}

\lstdefinestyle{mystyle}{
	commentstyle=\color{codegreen},
	keywordstyle=\color{magenta},
	stringstyle=\color{codepurple},
	basicstyle=\ttfamily\footnotesize,
	breakatwhitespace=false,         
	breaklines=true,                 
	captionpos=b,                    
	keepspaces=true,                 
	numbersep=5pt,                  
	showspaces=false,                
	showstringspaces=false,
	showtabs=false,                  
	tabsize=4
}
\lstset{style=mystyle}
\setlength{\parindent}{0mm}
\setlength{\parskip}{1.5mm}

\title{$1}
\author{$2}
\begin{document}
\maketitle

${0:${VISUAL}}

\tableofcontents
\end{document}
endsnippet

snippet template2 "Template double column" b 
\documentclass[english,notitlepage,reprint,nofootinbib]{revtex4-1}  % defines the basic parameters of the document
% For preview: skriv i terminal: latexmk -pdf -pvc filnavn
% If you want a single-column, remove "reprint"

% Allows special characters (including æøå)
\usepackage[utf8]{inputenc}
% \usepackage[english]{babel}

%% Note that you may need to download some of these packages manually, it depends on your setup.
%% I recommend downloading TeXMaker, because it includes a large library of the most common packages.

\usepackage{physics,amssymb}  % mathematical symbols (physics imports amsmath)
\include{amsmath}
\usepackage{graphicx}         % include graphics such as plots
\usepackage{xcolor}           % set colors
\usepackage{hyperref}         % automagic cross-referencing
\usepackage{listings}         % display code
\usepackage{subfigure}        % imports a lot of cool and useful figure commands
% \usepackage{float}
%\usepackage[section]{placeins}
\usepackage{algorithm}
\usepackage[noend]{algpseudocode}
\usepackage{subfigure}
\usepackage{physics}
\usepackage{tikz}
\usetikzlibrary{quantikz}
% defines the color of hyperref objects
% Blending two colors:  blue!80!black  =  80% blue and 20% black
\hypersetup{ % this is just my personal choice, feel free to change things
    colorlinks,
    linkcolor={red!50!black},
    citecolor={blue!50!black},
    urlcolor={blue!80!black}}


% ===========================================

\begin{document}
\title{$1}
\author{$2}
\date{\today}
\noaffiliation

\begin{abstract}

\end{abstract}
\maketitle


${0:${VISUAL}}

\tableofcontents
\end{document}


endsnippet

###############
# ENVIRONMENT #
###############

snippet threepart "Three part definition" bi
	\left\{
		\begin{array}{lll}
			$1 & \mbox{if } $2 \\
			$3 & \mbox{if } $4 \\
			$5 & \mbox{if } $6
		\end{array}
	\right.
endsnippet

snippet py "Python code" bi
\begin{lstlisting}[language=Python]
${0:${VISUAL}}
\end{lstlisting}
endsnippet

snippet eq "Equation" bi
\begin{equation}
${0:${VISUAL}}
\end{equation}
endsnippet

snippet beg "begin{} / end{}" bi
\begin{$1}
${0:${VISUAL}}
\end{$1}
endsnippet

snippet cnt "Center" bi
\begin{center}
${0:${VISUAL}}
\end{center}
endsnippet

snippet desc "Description" bi
\begin{description}
\item[${1:${VISUAL}}] $0
\end{description}
endsnippet

snippet lemma "Lemma" bi
\begin{lemma}
${0:${VISUAL}}
\end{lemma}
endsnippet

snippet prop "Proposition" bi
\begin{prop}[$1]
${0:${VISUAL}}
\end{prop}
endsnippet

snippet thrm "Theorem" bi
\begin{theorem}[$1]
${0:${VISUAL}}
\end{theorem}
endsnippet

snippet post "postulate" bi
\begin{postulate}[$1]
${0:${VISUAL}}
\end{postulate}
endsnippet

snippet prf "Proof" bi
\begin{myproof}[$1]
${0:${VISUAL}}
\end{myproof}
endsnippet

snippet def "Definition" bi
\begin{definition}[$1]
${0:${VISUAL}}
\end{definition}
endsnippet

snippet nte "Note" bi
\begin{note}[$1]
${0:${VISUAL}}
\end{note}
endsnippet

snippet prob "Problem" bi
\begin{problem}[$1]
${0:${VISUAL}}
\end{problem}
endsnippet

snippet corl "Corollary" bi
\begin{corollary}[$1]
${0:${VISUAL}}
\end{corollary}
endsnippet

snippet example "Example" bi
\begin{example}[$1]
${0:${VISUAL}}
\end{example}
endsnippet

snippet notion "Notation" bi
\begin{notation}[$1]
$0${VISUAL}
\end{notation}
endsnippet

snippet conc "Conclusion" bi
\begin{conclusion}[$1]
$0${VISUAL}
\end{conclusion}
endsnippet

snippet fig "Figure environment" bi
\begin{figure}[H]
\centering
${2:\includegraphics[width=0.8\textwidth]{$3}}
\caption{${4:$3}}
\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet fig1 "Figure environment" bi
\begin{figure}[${1:htpb}]
\centering
${2:\includegraphics[width=0.4\textwidth]{$3}}
\caption{${4:$3}}
\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet subfig "2 figures side by side" bi 
\begin{figure}[htpb]
\begin{subfigure}{.5\textwidth}
  \centering
  \includegraphics[width=.8\linewidth]{$1}
  \caption{$2}
  \label{fig:${3:${1/\W+/-/g}}}
\end{subfigure}%
\begin{subfigure}{.5\textwidth}
  \centering
  \includegraphics[width=.8\linewidth]{$4}
  \caption{$5}
  \label{fig:${6:${4/\W+/-/g}}}
\end{subfigure}
\caption{$7}
\label{fig:$8}
\end{figure}
endsnippet

snippet enum "Enumerate" bi
\begin{enumerate}
\item ${0:${VISUAL}}
\end{enumerate}
endsnippet

snippet item "Itemize" bi
\begin{itemize}
\item ${0:${VISUAL}}
\end{itemize}
endsnippet

snippet case "cases" bi
\begin{cases}
${0:${VISUAL}}
\end{cases}
endsnippet

snippet abs "abstract environment" b
\begin{abstract}
${0:${VISUAL}}
.\end{abstract}
endsnippet

snippet tab "tabular / array environment" b
\begin{${1:t}${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${2:c}}
$0${2/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$1${1/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
\centering
\caption{${2:caption}}
\label{tab:${3:label}}

\begin{${4:t}${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}{${5:c}}
$0${5/(?<=.)(c|l|r)|./(?1: & )/g}
\end{$4${4/(t)$|(a)$|(.*)/(?1:abular)(?2:rray)/}}
\end{table}
endsnippet

snippet lab "Label" w
\label{$1}$0
endsnippet

snippet ref1 "Refrence from hyperref package" w
\ref{$1}$0
endsnippet

snippet ref "Refrence from hyperref package" w
\autoref{$1}$0
endsnippet

###########
# Physics #
###########

snippet gr "Gradient nabla" w
\grad 
endsnippet

########
# MATH #
########

snippet tr "Triple bar" w
\equiv
endsnippet

snippet ap "Approx" w
\approx
endsnippet

snippet sim "Similar" w
\sim
endsnippet

snippet sime "Similar or equal" w
\simeq
endsnippet

snippet cc "subset" w
\subset 
endsnippet

snippet inn "in " w
\in 
endsnippet

snippet Nn "cap" w
\cap 
endsnippet

snippet UU "cup" w
\cup 
endsnippet

snippet uuu "bigcup" w
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" w
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet hol "Hollow character" i
\mathbb{$1}$0
endsnippet

snippet HH "H" w
\mathbb{H}
endsnippet

snippet DD "D" w
\mathbb{D}
endsnippet

snippet inm "Inline Math" w
$${1}$ $0
endsnippet

snippet inm1 "Inline Math" w
\\(${1}\\) $0
endsnippet

snippet dm "Display Math" w
\[
${1:${VISUAL}}
\]$0
endsnippet

snippet br "Bra" w
\bra{$1}$0
endsnippet

snippet ke "Ket" w
\ket{$1}$0
endsnippet

snippet braket "Braket" w
\braket{$1|$2}$0
endsnippet

snippet frac "Fraction" w
\frac{$1}{$2}$0
endsnippet

snippet in "Integrate" w
\int_{$1}^{$2}$0
endsnippet

snippet pa "Partial derivative" w
\frac{\partial $1}{\partial $2}$0
endsnippet

snippet grad "nabla gradient symbol" i
\nabla $0
endsnippet

snippet cd "cdot" i
\cdot 
endsnippet

snippet compl "Complement" i
^{c}
endsnippet

snippet hat "Hat" i
\hat{$1}$0
endsnippet

snippet vec "Vector arrow" i
\vec{$1}$0
endsnippet

snippet ** "Super Script" i
^{$1}$0
endsnippet

snippet __ "subscript" Aw
_{$1}$0
endsnippet

snippet sqrt "Square Root" wi
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet srto "... Root" wi
\sqrt[$1]{${2:${VISUAL}}}$0
endsnippet

snippet bft "Bold" wi
\textbf{${1:${VISUAL}}}$0
endsnippet

snippet bf "Bold" wi
\bf{${1:${VISUAL}}}$0
endsnippet

snippet bs "Bold symbol" wi
\boldsymbol{${1:${VISUAL}}}$0
endsnippet

snippet ver "Verb" wi
\verb|${1:${VISUAL}}|$0
endsnippet

snippet it "Italic" wi
\it{${1:${VISUAL}}}$0
endsnippet

snippet un "Underline" wi
\un{${1:${VISUAL}}}$0
endsnippet

snippet rm "Text" wi
\rm{${1:${VISUAL}}}$0
endsnippet

snippet itm "Item" wi
\item ${0:${VISUAL}}
endsnippet

snippet ceil "Ceil" w
\left\lceil $1 \right\rceil $0
endsnippet

snippet floor "Floor" w
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "Pmat" w
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "Bmat" w
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

snippet () "Left( right)" w
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" wi
\left<${1:${VISUAL}} \right>$0
endsnippet

snippet conj "conjugate" w
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{j=${1:1}}^{${2:n}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

snippet ooo "\infty" w
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet -> "Right arrow" w
\rightarrow
endsnippet

snippet fa "For all" w
\forall
endsnippet

snippet <- "Left arrow" w
\leftarrow
endsnippet

snippet => "Implies" w
\implies
endsnippet

snippet =< "Implied by" w
\impliedby
endsnippet

snippet iff "iff" w
\iff
endsnippet

snippet == "Equals" w
&= $1 \\\\
endsnippet

snippet != "Not Equal" w
\neq 
endsnippet

snippet <= "leq" Aw
\le 
endsnippet

snippet >= "geq" Aw
\ge 
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

snippet lll "l" Aw
\ell
endsnippet

snippet xx "cross" Aw
\times 
endsnippet

snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rw
\\`!p snip.rv = match.group(1)`($1)
endsnippet

snippet <! "normal" Aw
\triangleleft 
endsnippet

snippet "(\d|\w)+invs" "inverse" Awr
`!p snip.rv = match.group(1)`^{-1}
endsnippet

snippet !> "mapsto" Aw
\mapsto 
endsnippet

#------------------------- Greek -------------------------

snippet al "alpha" i
\alpha $0
endsnippet

snippet be "beta" i
\beta $0
endsnippet

snippet ga "gamma" i
\gamma $0
endsnippet

snippet de "delta" i
\delta $0
endsnippet

snippet De "Delta" i
\Delta $0
endsnippet

snippet ep "epsilon" i
\epsilon $0
endsnippet

snippet ve "varepsilon" i
\varepsilon $0
endsnippet

snippet et "eta" i
\eta $0
endsnippet

snippet th "theta" i
\theta $0
endsnippet

snippet Th "Theta" i
\Theta $0
endsnippet

snippet ka "kappa" i
\kappa $0
endsnippet

snippet la "lambda" i
\lambda $0
endsnippet

snippet mu "mu" i
\mu $0
endsnippet

snippet nu "nu" i
\nu $0
endsnippet

snippet xi "xi" i
\xi $0
endsnippet

snippet pi "pi" i
\pi $0
endsnippet

snippet si "sigma" i
\sigma $0
endsnippet

snippet Si "Sigma" i
\Sigma $0
endsnippet

snippet ta "tau" i
\tau $0
endsnippet

snippet ph "phi" i
\phi $0
endsnippet

snippet Ph "Phi" i
\Phi $0
endsnippet

snippet rh "Rho" i
\rho $0
endsnippet

snippet ps "psi" i
\psi $0
endsnippet

snippet Ps "Psi" i
\Psi $0
endsnippet

snippet hb "Reduced Planck constant" i
\hbar $0
endsnippet

snippet om "omega" i
\omega $0
endsnippet

snippet Om "Omega" i
\Omega $0
endsnippet

##########
# TABLES #
#########

pre_expand "create_table(snip)"
snippet "gentbl(\d+)x(\d+)" "Generate table of *width* by *height*" r
endsnippet

pre_expand "add_row(snip)"
snippet "tr(\d+)" "Add table row of dimension ..." r
endsnippet


###########
# POSTFIX #
###########

snippet bar "bar" wi
\bar{${1:${VISUAL}}}$0
endsnippet

snippet "\<(.*?)\|" "bra" wri
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "\|(.*?)\>" "ket" wri
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" Awri
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet


#############
# PRE-AMBLE #
#############

snippet pac "usepackage - removes square braces if options removed" b
\usepackage`!p snip.rv='[' if t[1] else ""`${1:options}`!p snip.rv = ']' if t[1] else ""`{${2:package}}$0
endsnippet

snippet docls "Document Class" bA
\documentclass{$1}$0
endsnippet


#########
# OTHER #
#########

snippet acl "Acroynm expanded" bi
\acl{${1:acronym}}
endsnippet

snippet ac "Acroynm normal" bi
\ac{${1:acronym}}
endsnippet

snippet ni "Non-indented paragraph" bi
\noindent
endsnippet


############
# SECTIONS #
############

snippet chap "Chapter" wi
\chapter{$1${VISUAL}}
endsnippet

snippet sec "Section" wi
\section{$1${VISUAL}}
endsnippet

snippet sec* "Section*" wi
\section*{$1${VISUAL}}
endsnippet

snippet sub "Subsection" wi
\subsection{$1${VISUAL}}
endsnippet

snippet sub* "Subsection*" wi
\subsection*{$1${VISUAL}}
endsnippet

snippet subsub "Subsection" wi
\subsubsection{$1${VISUAL}}
endsnippet

snippet subsub* "Subsubsection" wi
\subsubsection*{$1${VISUAL}}
endsnippet

snippet par "Paragraph" wi
\paragraph{$1${VISUAL}}
endsnippet

snippet par* "Paragraph*" wi
\paragraph*{$1${VISUAL}}
endsnippet

snippet subpar "Sub Paragraph" wi
\subparagraph{$1${VISUAL}}
endsnippet

snippet subpar* "Sub Paragraph*" wi
\subparagraph*{$1${VISUAL}}
endsnippet
# vim:ft=snippets:
